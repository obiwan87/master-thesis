    p = sequence(  ...         
        select(@(s) mini(cellfun(@(y) y.Out.loss, s)), ... 
               sequence(fork(grid('ExcludeWords', 'MinCount', num2cell(1:3), 'MaxCount', {Inf})), ...
                        TfIdf(), ...
                        SVMClassifier('KFold', 10) )), ...
        fork(nop(), ...
             sequence(LocalLexicalKnnSubstitution('K', 10, 'MaxIter', 10, 'DictDeltaThresh', 10), nop()), ...
             sequence( ...
                       fork(grid('GlobalLexicalKnnSubstitution', 'K', num2cell([150, 100, 50, 30, 20]), 'sigma', {@(x,y,z) (x+y), @(x,y,z) (x+y)./exp(1.3*z)})), ...
                       fork(nop(),LocalLexicalKnnSubstitution('K', 10, 'MaxIter', 10, 'DictDeltaThresh', 10)))), ...
        fork(TfIdf(), WordCountMatrix(), TfIdfVectorizer()), ...
        SVMClassifier('KFold', 10));

% p = sequence(nop(), select(@(x) 1, fork(nop(), nop())), nop());
% p = sequence(select(@(x) x, fork(nop(), sequence(nop(), nop()))), fork(nop(), sequence(nop(), nop()), nop()), nop());
% p = sequence(nop(), fork(nop(), nop()), nop());
%  p = sequence(nop(), fork(nop(), sequence(nop(), nop())), fork(nop(), nop()), nop());
%p = {};
% Create combinations of exclude words
% g = grid('ExcludeWords', 'MinCount', 1:5, 'MaxCount', Inf);
% 
% p{end+1} = select(@(s) mini(cellfun(@(y) y.Out.loss, s)), sequence(fork(g), TfIdf(), SVMClassifier('Kfold', 10))); %#ok<*SAGROW>
% p{end+1} = WordCountMatrix();
% p{end+1} = SVMClassifier('KFold', 10);

P = pipeline(p);
G = pipeline.PipelineGraph(P);
renderer = pipeline.PipelineRenderer(P);
figure; plot(renderer);
%report = ExperimentReport(0, 'test', 'test', 'test test');
%P.execute(Ws{5}, report);


